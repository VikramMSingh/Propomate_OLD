import logging
import datetime
from django.contrib import messages
from django.core.mail import send_mail
from django.contrib.auth.forms import UserCreationForm
from django.shortcuts import render, redirect, reverse
from django.contrib.auth.mixins import LoginRequiredMixin
from django.http.response import JsonResponse
from django.http import HttpResponse
from django.views import generic
from .models import *
from agents.views import AgentCreateView
from .forms import (LeadModelForm,
                    NewUserCreationForm, AssignAgentForm,
                    LeadCategoryUpdateForm, CategoryModelForm, FollowUpModelForm)
from agents.mixins import OrganizerAndLoginRequiredMixin


logger = logging.getLogger(__name__)
# Create your views here.


class SignupView(generic.CreateView):
    template_name = "registration/signup.html"
    form_class = NewUserCreationForm

    def get_success_url(self):
        return reverse("login")



class LandingPageView(generic.TemplateView):
    template_name = "landing_page.html"

    # def dispatch(self, request, *args, **kwargs):
    #	if request.user.is_authenticated:
    #		return redirect("dashboard")
    #	return super().dispatch(request, *args, **kwargs)


class DashboardView(OrganizerAndLoginRequiredMixin, generic.TemplateView):
    template_name = "dashboard.html"

    def get_context_data(self, **kwargs):
        context = super(DashboardView, self).get_context_data(**kwargs)

        user = self.request.user

        # How many leads we have in total
        total_lead_count = Lead.objects.filter(
            user_profile=user.userprofile).count()

        # How many new leads in the last 30 days
        thirty_days_ago = datetime.date.today() - datetime.timedelta(days=30)

        total_in_past30 = Lead.objects.filter(
            user_profile=user.userprofile,
            date_added__gte=thirty_days_ago
        ).count()

        # How many converted leads in the last 30 days
        converted_category = Category.objects.get(name="Converted")
        converted_in_past30 = Lead.objects.filter(
            user_profile=user.userprofile,
            category=converted_category,
            converted_date__gte=thirty_days_ago
        ).count()

        context.update({
            "total_lead_count": total_lead_count,
            "total_in_past30": total_in_past30,
            "converted_in_past30": converted_in_past30
        })
        return context


# def landing_page(request):
#	return render(request, "landing_page.html")
# Display list of leads
class LeadListView(LoginRequiredMixin, generic.ListView):
    template_name = "leads/lead_list.html"
    #user = self.request.user
    context_object_name = "leads"

    def get_queryset(self):
        user = self.request.user
        if user.is_organizer:
            queryset = Lead.objects.filter(
                user_profile=user.userprofile, agent__isnull=False)
        # if self.request.user.is_agent:
        else:
            queryset = Lead.objects.filter(
                user_profile=user.agent.userprofile, agent__isnull=False)
            # filter for current agent
            queryset = Lead.objects.filter(agent__user=user)
        return queryset

    def get_context_data(self, **kwargs):
        context = super(LeadListView, self).get_context_data(**kwargs)
        user = self.request.user
        if user.is_organizer:
            queryset = Lead.objects.filter(
                user_profile=user.userprofile, agent__isnull=True)
            context.update({
                "unassigned_leads": queryset
            })
        return context

# def lead_list(request):
    # return HttpResponse("This is going to be the best CRM in the world!")
#	leads = Lead.objects.all()
#	context = { "leads" : leads}
#	return render(request, "leads/lead_list.html", context)

# Detailed view of a lead


class LeadDetailView(LoginRequiredMixin, generic.DetailView):
    template_name = "leads/lead_detail.html"
    context_object_name = "lead"

    def get_queryset(self):
        user = self.request.user
        if user.is_organizer:
            queryset = Lead.objects.filter(user_profile=user.userprofile)
        # if self.request.user.is_agent:
        else:
            queryset = Lead.objects.filter(user_profile=user.agent.userprofile)
            # filter for current agent
            queryset = Lead.objects.filter(agent__user=user)
        return queryset

# def lead_detail(request,pk):
#	lead = Lead.objects.get(id=pk)
#	context = {
#		"lead": lead
#	}
#	return render(request,"leads/lead_detail.html", context)
# Create a lead


class LeadCreateView(OrganizerAndLoginRequiredMixin, generic.CreateView):
    template_name = "leads/lead_create.html"
    form_class = LeadModelForm

    def get_success_url(self):
        return reverse("leads:list-lead")

    def form_valid(self, form):
        # Send email
        lead = form.save(commit=False)
        lead.user_profile = self.request.user.userprofile
        lead.save()
        send_mail(
            subject="A lead has been created",
            message='A new lead has been added, please review',
            from_email="test@test.com",
            recipient_list=["vikrammsingh11@gmail.com"]
        )
        return super(LeadCreateView, self).form_valid(form)


# def lead_create(request):
#	form = LeadModelForm()
#	if request.method=="POST":
    #print("Post req received")
#		form = LeadModelForm(request.POST)
####
# context = {
#		"form": LeadModelForm()
#	}
#	return render(request,"leads/lead_create.html", context)

# Update or modify a lead

class LeadUpdateView(OrganizerAndLoginRequiredMixin, generic.UpdateView):
    template_name = "leads/update_lead.html"
    #queryset = Lead.objects.all()
    form_class = LeadModelForm

    def get_queryset(self):
        user = self.request.user
        if user.is_organizer:
            queryset = Lead.objects.filter(user_profile=user.userprofile)
        return queryset

    def get_success_url(self):
        return reverse("leads:list-lead")

# def update_lead(request,pk):
#	lead = Lead.objects.get(id=pk)
#	form = LeadModelForm(instance=lead)
    # ^ will only update the lead, not create or modify others
#	if request.method=="POST":
#		if form.is_valid():
#			form.save()
#			return redirect("/leads")
#	context = {
#		"form": form,
#		"lead": lead
#	}
#	return render(request, "leads/update_lead.html", context)

# Delete a lead


class LeadDeleteView(OrganizerAndLoginRequiredMixin, generic.DeleteView):
    template_name = "leads/delete_lead.html"
    #queryset = Lead.objects.all()

    def get_queryset(self):
        user = self.request.user
        if user.is_organizer:
            queryset = Lead.objects.filter(user_profile=user.userprofile)
        return queryset

    def get_success_url(self):
        return reverse("leads:list-lead")
# def delete_lead(request,pk):
#	lead = Lead.objects.get(id=pk)
#	lead.delete()
#	return redirect("/leads")


class AssignAgentView(OrganizerAndLoginRequiredMixin, generic.FormView):
    template_name = "leads/assign_agent.html"
    form_class = AssignAgentForm

# For passing extra arguments to form
    def get_form_kwargs(self, **kwargs):
        kwargs = super(AssignAgentView, self).get_form_kwargs(**kwargs)
        kwargs.update({
            "request": self.request
        })
        return kwargs

    def get_success_url(self):
        return reverse("leads:list-lead")

    def form_valid(self, form):
        agent = form.cleaned_data["agent"]
        lead = Lead.objects.get(id=self.kwargs["pk"])
        lead.agent = agent
        lead.save()
        return super(AssignAgentView, self).form_valid(form)


class CategoryListView(LoginRequiredMixin, generic.ListView):
    template_name = "leads/category_list.html"
    context_object_name = "category_list"

    def get_context_data(self, **kwargs):
        context = super(CategoryListView, self).get_context_data(**kwargs)
        user = self.request.user
        if user.is_organizer:
            queryset = Lead.objects.filter(user_profile=user.userprofile)
        # if self.request.user.is_agent:
        else:
            queryset = Lead.objects.filter(user_profile=user.agent.userprofile)

        context.update({
            "unassigned_lead_count": queryset.filter(category__isnull=True).count()
        })
        return context

    def get_queryset(self):
        user = self.request.user
        if user.is_organizer:
            queryset = Category.objects.filter(user_profile=user.userprofile)
        # if self.request.user.is_agent:
        else:
            queryset = Category.objects.filter(
                user_profile=user.agent.userprofile)
        return queryset


class CategoryDetailView(LoginRequiredMixin, generic.DetailView):
    template_name = "leads/category_detail.html"
    context_object_name = "category"

    # def get_context_data(self, **kwargs):
    #	context=super(CategoryDetailView, self).get_context_data(**kwargs)
    #	user = self.request.user
    #	Lead.object.filter(category=self.get_object())
#	context.update({
    #		"unassigned_lead_count": queryset.filter(category__isnull=True).count()
    #		})
    #	return context

    def get_queryset(self):
        user = self.request.user
        if user.is_organizer:
            queryset = Category.objects.filter(user_profile=user.userprofile)
        # if self.request.user.is_agent:
        else:
            queryset = Category.objects.filter(
                user_profile=user.agent.userprofile)
        return queryset


class CategoryCreateView(OrganizerAndLoginRequiredMixin, generic.CreateView):
    template_name = "leads/category_create.html"
    form_class = CategoryModelForm

    def get_success_url(self):
        return reverse("leads:category-list")

    def form_valid(self, form):
        category = form.save(commit=False)
        category.user_profile = self.request.user.userprofile
        category.save()
        return super(CategoryCreateView, self).form_valid(form)


class CategoryUpdateView(OrganizerAndLoginRequiredMixin, generic.UpdateView):
    template_name = "leads/category_update.html"
    form_class = CategoryModelForm

    def get_success_url(self):
        return reverse("leads:category-list")

    def get_queryset(self):
        user = self.request.user
        # initial queryset of leads for the entire organisation
        if user.is_organizer:
            queryset = Category.objects.filter(
                user_profile=user.userprofile
            )
        else:
            queryset = Category.objects.filter(
                user_profile=user.agent.organisation
            )
        return queryset


class CategoryDeleteView(OrganizerAndLoginRequiredMixin, generic.DeleteView):
    template_name = "leads/category_delete.html"

    def get_success_url(self):
        return reverse("leads:category-list")

    def get_queryset(self):
        user = self.request.user
        # initial queryset of leads for the entire organisation
        if user.is_organizer:
            queryset = Category.objects.filter(
                user_profile=user.userprofile
            )
        else:
            queryset = Category.objects.filter(
                user_profile=user.agent.userprofile
            )
        return queryset


class LeadCategoryUpdateView(LoginRequiredMixin, generic.UpdateView):
    template_name = "leads/lead_category_update.html"
    form_class = LeadCategoryUpdateForm

    def get_queryset(self):
        user = self.request.user
        # initial queryset of leads for the entire organisation
        if user.is_organizer:
            queryset = Lead.objects.filter(user_profile=user.userprofile)
        else:
            queryset = Lead.objects.filter(
                user_profile=user.agent.organisation)
            # filter for the agent that is logged in
            queryset = queryset.filter(agent__user=user)
        return queryset

    def get_success_url(self):
        return reverse("leads:detail-view", kwargs={"pk": self.get_object().id})

    def form_valid(self, form):
        lead_before_update = self.get_object()
        instance = form.save(commit=False)
        converted_category = Category.objects.get(name="Converted")
        if form.cleaned_data["category"] == converted_category:
            # update the date at which this lead was converted
            if lead_before_update.category != converted_category:
                # this lead has now been converted
                instance.converted_date = datetime.datetime.now()
        instance.save()
        return super(LeadCategoryUpdateView, self).form_valid(form)


class FollowUpCreateView(LoginRequiredMixin, generic.CreateView):
    template_name = "leads/followup_create.html"
    form_class = FollowUpModelForm

    def get_success_url(self):
        return reverse("leads:detail-view", kwargs={"pk": self.kwargs["pk"]})

    def get_context_data(self, **kwargs):
        context = super(FollowUpCreateView, self).get_context_data(**kwargs)
        context.update({
            "lead": Lead.objects.get(pk=self.kwargs["pk"])
        })
        return context

    def form_valid(self, form):
        lead = Lead.objects.get(pk=self.kwargs["pk"])
        followup = form.save(commit=False)
        followup.lead = lead
        followup.save()
        return super(FollowUpCreateView, self).form_valid(form)


class FollowUpUpdateView(LoginRequiredMixin, generic.UpdateView):
    template_name = "leads/followup_update.html"
    form_class = FollowUpModelForm

    def get_queryset(self):
        user = self.request.user
        # initial queryset of leads for the entire organisation
        if user.is_organizer:
            queryset = FollowUp.objects.filter(
                lead__organisation=user.userprofile)
        else:
            queryset = FollowUp.objects.filter(
                lead__organisation=user.agent.organisation)
            # filter for the agent that is logged in
            queryset = queryset.filter(lead__agent__user=user)
        return queryset

    def get_success_url(self):
        return reverse("leads:detail-view", kwargs={"pk": self.get_object().lead.id})


class FollowUpDeleteView(OrganizerAndLoginRequiredMixin, generic.DeleteView):
    template_name = "leads/followup_delete.html"

    def get_success_url(self):
        followup = FollowUp.objects.get(id=self.kwargs["pk"])
        return reverse("leads:detail-view", kwargs={"pk": followup.lead.pk})

    def get_queryset(self):
        user = self.request.user
        # initial queryset of leads for the entire organisation
        if user.is_organizer:
            queryset = FollowUp.objects.filter(
                lead__organisation=user.userprofile)
        else:
            queryset = FollowUp.objects.filter(
                lead__organisation=user.agent.organisation)
            # filter for the agent that is logged in
            queryset = queryset.filter(lead__agent__user=user)
        return queryset


class LeadJsonView(generic.View):

    def get(self, request, *args, **kwargs):

        qs = list(Lead.objects.all().values(
            "first_name",
            "last_name",
            "age")
        )

        return JsonResponse({
            "qs": qs,
        })

class LeadLearnView(LoginRequiredMixin,generic.TemplateView):
    template_name="learning/leads_how_to.html"


